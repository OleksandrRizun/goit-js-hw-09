{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SA4CA,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAOC,QAAU,IAAIC,SAAQ,SAACC,EAASC,GACjCN,EACFK,EAAQ,qBAAoCE,OAAfT,EAAS,QAAYS,OAANR,EAAM,OAElDO,EAAO,oBAAmCC,OAAfT,EAAS,QAAYS,OAANR,EAAM,M,IAhDtDS,KAAO,CACLC,OAAQC,SAASC,cAAe,UAChCC,OAAQF,SAASG,qBAAsB,UAGzCL,KAAKC,OAAOK,iBAAiB,SAAS,SAACC,GACrCA,EAAEC,iBAOJ,SAAyBC,EAAOC,EAAMC,GACpC,IAAKC,OAAOC,UAAWJ,KAAWG,OAAOC,UAAWH,KAAUE,OAAOC,UAAWF,IAAWF,EAAQ,GAAKC,EAAO,GAAKC,GAAU,EAAG,OACjI,IAAIpB,EAAQkB,EACZK,YAAY,WAQV,GAPAzB,EAAc,EAAGE,GACZwB,MAAK,SAAAC,GACJ7B,EAAA8B,OAAOC,QAAQF,E,IAEhBG,OAAM,SAAAC,GACLjC,EAAA8B,OAAOI,QAAQD,E,IAEP,GAAVT,EACJ,IAAIW,EAAU,EACVC,EAAUC,aAAa,WAEzBnC,EAAciC,EADd/B,GAASmB,GAENK,MAAK,SAAAC,GACJ7B,EAAA8B,OAAOC,QAAQF,E,IAEhBG,OAAM,SAAAC,GACLjC,EAAA8B,OAAOI,QAAQD,E,MAEnBE,EACcX,GAAQc,cAAcF,E,GACnCb,E,GACFnB,E,CA5BHmC,EAHc1B,KAAKI,OAAQ,GAAGY,OAChBhB,KAAKI,OAAQ,GAAGY,OAChBhB,KAAKI,OAAQ,GAAGY,M","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nrefs = {\n  button: document.querySelector (\"button\"),\n  fields: document.getElementsByTagName (\"input\")\n}\n\nrefs.button.addEventListener(\"click\", (e) => {\n  e.preventDefault ();\n  let field1 = +refs.fields [0].value;\n  let field2 = +refs.fields [1].value;\n  let field3 = +refs.fields [2].value;\n  createPromises (field1, field2, field3)\n});\n\nfunction createPromises (first, step, amount) {\n  if (!Number.isInteger (first) || !Number.isInteger (step) || !Number.isInteger (amount) || first < 0 || step < 0 || amount <= 0) return;\n  let delay = first;\n  setTimeout (() => {\n    createPromise(1, delay)\n        .then(value => {\n          Notify.success(value);\n        })\n        .catch(error => {\n          Notify.failure(error);\n        })\n    if (amount == 1) return;\n    let counter = 2;\n    let timerId = setInterval (()=> {\n      delay += step;\n      createPromise(counter, delay)\n        .then(value => {\n          Notify.success(value);\n        })\n        .catch(error => {\n          Notify.failure(error);\n        })\n      counter++;\n      if (counter > amount) clearInterval(timerId)\n    }, step)\n  }, delay\n  )\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return promise = new Promise((resolve, reject) => {\n    if (shouldResolve) {\n      resolve(`Fulfilled promise ${position} in ${delay}ms`);\n    } else {\n      reject(`Rejected promise ${position} in ${delay}ms`);\n    }\n  });\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","promise","Promise","resolve","reject","concat","refs","button","document","querySelector","fields","getElementsByTagName","addEventListener","e","preventDefault","first","step","amount","Number","isInteger","setTimeout","then","value","Notify","success","catch","error","failure","counter","timerId","setInterval","clearInterval","$ce04d3a99e08e73b$var$createPromises"],"version":3,"file":"03-promises.4fde086a.js.map"}